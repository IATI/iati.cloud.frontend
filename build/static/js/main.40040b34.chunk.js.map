{"version":3,"sources":["app/modules/common/pageloader/PageLoader.js","app/components/CookieNotice/style.ts","app/components/CookieNotice/index.tsx","app/modules/Landing/index.tsx","app/Routes.tsx","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["PageLoader","_ref","classes","react_default","a","createElement","className","progress","CircularProgress","withStyles","theme","display","flexDirection","alignItems","justifyContent","height","margin","spacing","unit","ComponentBase","styled","div","withConfig","displayName","componentId","CookieMessage","p","Spacer","CookieButton","CookieInfoLink","NavLink","CookieNotice","props","_useCookie","useCookie","_useCookie2","Object","slicedToArray","cookie","setCookie","_useState","useState","_useState2","visible","setVisibility","cookieText","to","cookieLinkText","data-cy","onClick","cookieButtonText","defaultProps","useStyles","makeStyles","button","input","Landing","Landing_ComponentBase","Button","variant","color","disabled","href","components_CookieNotice","Routes","Fragment","react","fallback","pageloader_PageLoader","react_router","exact","path","render","modules_Landing","App","react_router_dom","app_Routes","Boolean","window","location","hostname","match","ReactDOM","app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.40040b34.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/styles/withStyles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst styles = theme => ({\n  progress: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: '100vh',\n    margin: theme.spacing.unit * 5\n  }\n});\n\nconst PageLoader = ({ classes }) => {\n  return (\n    <div className={classes.progress}>\n      <CircularProgress />\n    </div>\n  );\n};\n\nPageLoader.propTypes = {\n  classes: PropTypes.object.isRequired // Material UI Injected\n};\n\nexport default withStyles(styles)(PageLoader);\n","import styled from 'styled-components';\nimport theme from 'app/theme';\nimport { NavLink } from 'react-router-dom';\n\n/* general */\nconst CookieNoticeBackground = 'yellow';\nconst CookieNoticeFontFam = 'Roboto';\nconst CookieNoticeTextColor = 'black';\nconst CookieNoticeFontWeight = 400;\n/* cookie message */\nconst CookieMessageFontSize = '16px';\n/* cookie button */\nconst CookieButtonBorderColor = 'red';\nconst CookieButtonFontSize = '12px';\n/* hovers */\nconst HoverOpacity = 0.5;\n\n\nconst TestComp = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: ${CookieNoticeBackground};\n  width: 100vw;\n  height: 130px;\n  overflow: hidden;\n  position: fixed;\n  bottom: 0;\n  z-index: 10;\n`;\n\nexport const ComponentBase = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: ${CookieNoticeBackground};\n  width: 100vw;\n  height: 130px;\n  overflow: hidden;\n  position: fixed;\n  bottom: 0;\n  z-index: 10;\n`;\n\nexport const CookieMessage = styled.p`\n  color: ${CookieNoticeTextColor};\n  font-size: ${CookieMessageFontSize};\n  font-family: ${CookieNoticeFontFam};\n  font-weight: ${CookieNoticeFontWeight};\n  max-width: 674px;\n  width: 100%;\n  line-height: 25.6px;\n  margin: 0;\n`;\n\nexport const Spacer = styled.div`\n  width: 60px;\n`;\n\n/* todo: create separate component for the cookie button */\nexport const CookieButton = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  max-width: 276px;\n  width: 100%;\n  height: 62px;\n  text-decoration: none;\n  color: ${CookieNoticeTextColor};\n  font-family: ${CookieNoticeFontFam};\n  font-weight: ${CookieNoticeFontWeight};\n  font-size: ${CookieButtonFontSize};\n  border-radius: 50px;\n  border: 2px solid ${CookieButtonBorderColor};\n  line-height: 56px;\n  cursor: pointer;\n  &:hover {\n    opacity: ${HoverOpacity};\n  }\n`;\n\nexport const CookieInfoLink = styled(NavLink)`\n  color: white;\n  &:hover {\n    opacity: ${HoverOpacity};\n  }\n`;\n","/* base */\nimport React, { useState } from 'react';\nimport useCookie from '@devhammed/use-cookie';\n\nimport {\n  ComponentBase,\n  CookieButton,\n  CookieInfoLink,\n  CookieMessage,\n  Spacer\n} from './style';\n\ntype CookieNoticeProps = {\n  cookieText?: string;\n  cookieButtonText?: string;\n  cookieLinkText?: string;\n};\n\nconst CookieNotice: React.FC<CookieNoticeProps> = props => {\n  /* this hook is for setting the cookie */\n  const [cookie, setCookie] = useCookie('cookieNotice', 'true');\n  /* this hook is for visually hiding the component */\n  const [visible, setVisibility] = useState(cookie);\n\n  // console.log();\n  return (\n    /* if visible is false, hide */\n    visible &&\n    /* if cookie is false, also hide */\n    (cookie && (\n      <ComponentBase>\n        <CookieMessage>\n          {props.cookieText}\n          <CookieInfoLink to=\"/cookies\">{props.cookieLinkText}</CookieInfoLink>\n        </CookieMessage>\n        <Spacer />\n        <CookieButton\n          data-cy=\"cookie-notice\"\n          onClick={() => {\n            setCookie('false');\n            setVisibility(!visible);\n          }}\n        >\n          {props.cookieButtonText}\n        </CookieButton>\n      </ComponentBase>\n    ))\n  );\n};\n\nCookieNotice.defaultProps = {\n  cookieText:\n    'Zoom gebruikt cookies om het bezoek (geanonimiseerd) te analyseren om verbeteringen aan te brengen. Indien je hiermee akkoord bent, hoef je je voorkeuren niet te wijzigen. ',\n  cookieButtonText: 'accepteren',\n  cookieLinkText: 'Meer informatie'\n};\n\nexport default CookieNotice;\n","/* base */\nimport React from 'react';\nimport styled from 'styled-components';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport CookieNotice from 'app/components/CookieNotice';\nconst ComponentBase = styled.div``;\n\nconst useStyles = makeStyles(theme => ({\n  button: {\n    margin: theme.spacing(1)\n  },\n  input: {\n    display: 'none'\n  }\n}));\n\nconst Landing: React.FunctionComponent = () => {\n  const classes = useStyles();\n  return (\n    <ComponentBase>\n      <Button variant=\"contained\" className={classes.button}>\n        Default\n      </Button>\n      <Button variant=\"contained\" color=\"primary\" className={classes.button}>\n        Primary\n      </Button>\n      <Button variant=\"contained\" color=\"secondary\" className={classes.button}>\n        Secondary\n      </Button>\n      <Button\n        variant=\"contained\"\n        color=\"secondary\"\n        disabled\n        className={classes.button}\n      >\n        Disabled\n      </Button>\n      <Button\n        variant=\"contained\"\n        href=\"#contained-buttons\"\n        className={classes.button}\n      >\n        Link\n      </Button>\n      <CookieNotice />\n    </ComponentBase>\n  );\n};\n\nexport default Landing;\n","import React, { Suspense } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport PageLoader from 'app/modules/common/pageloader/PageLoader';\nimport Landing from 'app/modules/Landing';\n\nconst Routes: React.FunctionComponent = () => {\n  return (\n    <React.Fragment>\n      <Suspense fallback={<PageLoader />}>\n        <Switch>\n          <Route exact path=\"/\" render={() => <Landing />} />\n        </Switch>\n      </Suspense>\n    </React.Fragment>\n  );\n};\n\nexport default Routes;\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport Routes from './Routes';\n\nconst App: React.FunctionComponent = () => {\n  return (\n    <div>\n      <Router>\n        <Routes />\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from 'app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}